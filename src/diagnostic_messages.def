#ifndef DEFINE_ERROR
#    define DEFINE_ERROR(code, msg)
#endif
#ifndef DEFINE_WARNING
#    define DEFINE_WARNING(code, msg)
#endif

// Fatal errors
DEFINE_ERROR(FAILED_TO_OPEN_FILE, "Failed to open file '{}'.")

// Tokenization error
DEFINE_ERROR(UNRECOGNIZED_SYMBOL, "Unrecognized symbol")
DEFINE_ERROR(LINE_CONTINUATION_NOT_SUPPORTED, "Line continuations are not supported")
DEFINE_ERROR(INVALID_NUMBER_FORMAT, "Invalid number format")
DEFINE_ERROR(UNTERMINATED_STRING_LITERAL, "Unterminated string literal")

// Syntax errors
// Program
DEFINE_ERROR(EXPECTED_END_OF_LINE, "Expected `\\n`, found `{}`")
DEFINE_ERROR(EXPECTED_END_DIR, "All files must end with the `END` directive")

// Statement
DEFINE_ERROR(MUST_BE_IN_SEGMENT_BLOCK,
             "Instructions and data definitions must be in segment blocks (`.CODE` or `.DATA`)")

// SegDir

// DataDir
// EXPECTED_IDENTIFIER_IN_DATA_DIR = EXPECTED_IDENTIFIER

// StructDir
// EXPECTED_IDENTIFIER_IN_STRUCT_DIR = EXPECTED_IDENTIFIER
DEFINE_ERROR(EXPECTED_IDENTIFIER_BEFORE_STRUC, "Expected a name before `STRUC` directive")
DEFINE_ERROR(EXPECTED_DIFFERENT_IDENTIFIER_STRUCT_DIR, "`STRUC` names dont't match")
DEFINE_ERROR(EXPECTED_ENDS, "All `STRUC` definitions must end with the `ENDS` directive")
DEFINE_ERROR(MISSING_IDENTIFIER_BEFORE_ENDS, "Before `ENDS` directive a `STRUC` name must be specified")

// ProcDir
// EXPECTED_IDENTIFIER_IN_PROC_DIR = EXPECTED_IDENTIFIER
DEFINE_ERROR(EXPECTED_IDENTIFIER_BEFORE_PROC, "Expected a name before `PROC` directive")
DEFINE_ERROR(EXPECTED_DIFFERENT_IDENTIFIER_PROC_DIR, "`PROC` names dont't match")
DEFINE_ERROR(EXPECTED_ENDP, "All `PROC` definitions must end with the `ENDP` directive")
DEFINE_ERROR(MISSING_IDENTIFIER_BEFORE_ENDP, "Before `ENDP` directive a `PROC` name must be specified")

// RecordDir
// EXPECTED_IDENTIFIER_IN_RECORD_DIR = EXPECTED_IDENTIFIER
DEFINE_ERROR(EXPECTED_COLON_IN_RECORD_DIR, "Expected `:`")
DEFINE_ERROR(EXPECTED_IDENTIFIER_BEFORE_RECORD, "Expected a name before `RECORD` directive")

// EquDir
// EXPECTED_IDENTIFIER_IN_EQU_DIR = EXPECTED_IDENTIFIER
DEFINE_ERROR(EXPECTED_IDENTIFIER_BEFORE_EQU, "Expected a name before `EQU` directive")

// EqualDir
// EXPECTED_IDENTIFIER_IN_EQUAL_DIR = EXPECTED_IDENTIFIER
DEFINE_ERROR(EXPECTED_IDENTIFIER_BEFORE_EQUAL, "Expected a name before `=` directive")

// Instruction
DEFINE_ERROR(EXPECTED_INSTRUCTION, "Expected instruction name")
DEFINE_ERROR(EXPECTED_COMMA_OR_END_OF_LINE, "Expected `,` or `\\n`")
// EXPECTED_IDENTIFIER_IN_LABEL = EXPECTED_IDENTIFIER

// DataItem
DEFINE_ERROR(EXPECTED_VARIABLE_NAME_OR_DATA_DIRECTIVE,
             "Expected variable name or data directive (`DB`, `DW`, `DD`, 'DQ`)")

// InitValue
// UNCLOSED_DELIMITER_IN_INIT_VALUE = UNCLOSED_DELIMITER
DEFINE_ERROR(EXPECTED_COMMA_OR_CLOSING_DELIMITER, "Expected `,` or `>` or `)`")
DEFINE_ERROR(EXPECTED_OPEN_BRACKET, "Expected `(`")

// Expression
DEFINE_ERROR(UNCLOSED_DELIMITER, "This line contains an unclosed delimiter: `{}`")
DEFINE_ERROR(EXPECTED_EXPRESSION, "Expected expression, found `{}`")
DEFINE_ERROR(UNEXPECTED_CLOSING_DELIMITER, "Unexpected closing delimiter: `{}`")
DEFINE_ERROR(EXCPECTED_OPERATOR_OR_CLOSING_DELIMITER, "Expected operator or `)` or `]`")
DEFINE_ERROR(EXPECTED_IDENTIFIER, "Expected identifier, found `{}`")

// Semantic errors
// Expression errors
DEFINE_ERROR(REGISTER_NOT_ALLOWED, "Register is not allowed outside of instruction operands")
DEFINE_ERROR(CONSTANT_TOO_LARGE, "Constant too large")
DEFINE_ERROR(UNARY_OPERATOR_INCORRECT_ARGUMENT, "Incorrect argument in the unary operator `{}`")
DEFINE_ERROR(DOT_OPERATOR_INCORRECT_ARGUMENT, "Incorrect argument in the binary operator `.`")
DEFINE_ERROR(PTR_OPERATOR_INCORRECT_ARGUMENT, "Incorrect argument in the binary operator `PTR`")
DEFINE_ERROR(DIVISION_BY_ZERO_IN_EXPRESSION, "Division by `0` in the expression")
DEFINE_ERROR(INVALID_SCALE_VALUE, "Invalid scale value")
DEFINE_ERROR(INCORRECT_INDEX_REGISTER, "Index register can't be `ESP`")
DEFINE_ERROR(OTHER_BINARY_OPERATOR_INCORRECT_ARGUMENT, "Incorrect argument in the binary operator `{}`")
DEFINE_ERROR(CANT_ADD_VARIABLES, "Can't {} add 2 variables")
DEFINE_ERROR(INVALID_ADDRESS_EXPRESSION, "Invalid address expression")
DEFINE_ERROR(MORE_THAN_TWO_REGISTERS, "Can't have more than 2 registers in an address expression with modificators")
DEFINE_ERROR(MORE_THAN_ONE_SCALE,
             "Can't have more than 1 register with a scale in an address expression with modificators")
DEFINE_ERROR(TWO_ESP_REGISTERS, "Can't have 2 ESP registers in an address expression with modificators")
DEFINE_ERROR(NON_32BIT_REGISTER, "Can't have a non 32 bit register in an address expression with modificators")
DEFINE_ERROR(BINARY_MINUS_OPERATOR_INCORRECT_ARGUMENT, "Incorrect argument in the binary operator `-`")
DEFINE_ERROR(NON_REGISTER_IN_SQUARE_BRACKETS,
             "Can only have a register with an optional scale and an optional constant expression inside `[]`")

// Warnings
// Expression warnings
DEFINE_WARNING(TYPE_RETURNS_ZERO, "`TYPE` operator returns `0`")